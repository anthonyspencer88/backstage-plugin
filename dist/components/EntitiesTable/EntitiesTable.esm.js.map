{"version":3,"file":"EntitiesTable.esm.js","sources":["../../../src/components/EntitiesTable/EntitiesTable.tsx"],"sourcesContent":["import { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Progress, Table, TableColumn } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { catalogApiRef, EntityRefLink } from '@backstage/plugin-catalog-react';\nimport Link from '@material-ui/core/Link';\nimport { Alert } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { RootlyApiRef } from '../../api';\nimport {\n  autoImportService,\n  ROOTLY_ANNOTATION_SERVICE_ID,\n  ROOTLY_ANNOTATION_SERVICE_SLUG,\n  ROOTLY_ANNOTATION_FUNCTIONALITY_ID,\n  ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG,\n  ROOTLY_ANNOTATION_TEAM_ID,\n  ROOTLY_ANNOTATION_TEAM_SLUG,\n} from '../../integration';\nimport { Entity, Service, Functionality, Team } from '../../types';\n\nexport const EntitiesTable = () => {\n  const catalogApi = useApi(catalogApiRef);\n  const RootlyApi = useApi(RootlyApiRef);\n  const smallColumnStyle = {\n    width: '5%',\n    maxWidth: '5%',\n  };\n\n  const [reload, setReload] = useState(false);\n\n  const { value, loading, error } = useAsync(\n    async () => await catalogApi.getEntities(),\n  );\n\n  const handleServiceUpdate = async (\n    entity: Entity,\n    service: Service,\n    old_service?: Service,\n  ) => {\n    await RootlyApi.updateServiceEntity(entity, service, old_service);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleServiceImport = async (entity: Entity) => {\n    await RootlyApi.importServiceEntity(entity);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleServiceDelete = async (service: Service) => {\n    await RootlyApi.deleteServiceEntity(service);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleFunctionalityUpdate = async (\n    entity: Entity,\n    service: Functionality,\n    old_service?: Functionality,\n  ) => {\n    await RootlyApi.updateFunctionalityEntity(entity, service, old_service);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleFunctionalityImport = async (entity: Entity) => {\n    await RootlyApi.importFunctionalityEntity(entity);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleFunctionalityDelete = async (service: Functionality) => {\n    await RootlyApi.deleteFunctionalityEntity(service);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleTeamUpdate = async (\n    entity: Entity,\n    team: Team,\n    old_team?: Team,\n  ) => {\n    await RootlyApi.updateTeamEntity(entity, team, old_team);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleTeamImport = async (entity: Entity) => {\n    await RootlyApi.importTeamEntity(entity);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  const handleTeamDelete = async (team: Team) => {\n    await RootlyApi.deleteTeamEntity(team);\n    setTimeout(() => setReload(!reload), 500);\n  };\n\n  useEffect(() => {\n    catalogApi.getEntities().then(entities => {\n      entities.items.forEach(entity => {\n        const entityTriplet = stringifyEntityRef({\n          namespace: entity.metadata.namespace,\n          kind: entity.kind,\n          name: entity.metadata.name,\n        });\n\n        const service_id_annotation =\n          entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_ID] ||\n          entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_SLUG];\n\n        if (service_id_annotation) {\n          RootlyApi.getService(service_id_annotation)\n            .then(annotationServiceResponse => {\n              const annotationService = annotationServiceResponse.data;\n              if (annotationService.attributes.backstage_id && annotationService.attributes.backstage_id !== entityTriplet) {\n                RootlyApi.getServices({\n                  filter: {\n                    backstage_id: annotationService.attributes.backstage_id,\n                  },\n                }).then(servicesResponse => {\n                  const service =\n                    servicesResponse &&\n                    servicesResponse.data &&\n                    servicesResponse.data.length > 0\n                      ? servicesResponse.data[0]\n                      : null;\n                  if (service) {\n                    RootlyApi.updateServiceEntity(\n                      entity as Entity,\n                      annotationService,\n                      service,\n                    );\n                  }\n                });\n              } else {\n                RootlyApi.updateServiceEntity(\n                  entity as Entity,\n                  annotationService,\n                );\n              }\n            })\n            .catch(() => {\n              if (autoImportService(entity)) {\n                RootlyApi.importServiceEntity(entity as Entity);\n              }\n            });\n        }\n      });\n    });\n  }, []);\n\n  const fetchService = (entity: Entity, reloadService: boolean) => {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const {\n      value: response,\n      loading,\n      error,\n    } = useAsync(\n      async () =>\n        await RootlyApi.getServices({\n          filter: {\n            backstage_id: entityTriplet,\n          },\n        }),\n      [reloadService],\n    );\n    if (loading) {\n      return <Progress />;\n    } else if (error) {\n      return <div>Error</div>;\n    }\n    if (response && response.data.length > 0) {\n      entity.linkedService = response.data[0] as Service;\n      return (\n        <Link\n          target=\"blank\"\n          href={RootlyApi.getServiceDetailsURL(entity.linkedService)}\n        >\n          {entity.linkedService.attributes.name}\n        </Link>\n      );\n    } \n      entity.linkedService = undefined;\n      return <div>Not Linked</div>;\n  };\n\n  const fetchFunctionality = (entity: Entity, reloadFunc: boolean) => {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const {\n      value: response,\n      loading,\n      error,\n    } = useAsync(\n      async () =>\n        await RootlyApi.getFunctionalities({\n          filter: {\n            backstage_id: entityTriplet,\n          },\n        }),\n      [reloadFunc],\n    );\n    if (loading) {\n      return <Progress />;\n    } else if (error) {\n      return <div>Error</div>;\n    }\n    if (response && response.data.length > 0) {\n      entity.linkedFunctionality = response.data[0] as Functionality;\n      return (\n        <Link\n          target=\"blank\"\n          href={RootlyApi.getFunctionalityDetailsURL(entity.linkedFunctionality)}\n        >\n          {entity.linkedFunctionality.attributes.name}\n        </Link>\n      );\n    } \n      entity.linkedFunctionality = undefined;\n      return <div>Not Linked</div>;\n  };\n\n  const fetchTeam = (entity: Entity, reloadTeam: boolean) => {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const {\n      value: response,\n      loading,\n      error,\n    } = useAsync(\n      async () =>\n        await RootlyApi.getTeams({\n          filter: {\n            backstage_id: entityTriplet,\n          },\n        }),\n      [reloadTeam],\n    );\n    if (loading) {\n      return <Progress />;\n    } else if (error) {\n      return <div>Error</div>;\n    }\n    if (response && response.data.length > 0) {\n      entity.linkedTeam = response.data[0] as Team;\n      return (\n        <Link\n          target=\"blank\"\n          href={RootlyApi.getTeamDetailsURL(entity.linkedTeam)}\n        >\n          {entity.linkedTeam.attributes.name}\n        </Link>\n      );\n    } \n      entity.linkedTeam = undefined;\n      return <div>Not Linked</div>;\n  };\n\n  const columns: TableColumn<Entity>[] = [\n    {\n      title: 'Kind',\n      field: 'kind',\n      highlight: true,\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n    },\n    {\n      title: 'Name',\n      field: 'metadata.name',\n      highlight: true,\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => {\n        return <EntityRefLink entityRef={rowData} />;\n      },\n    },\n    {\n      title: 'Description',\n      field: 'metadata.description',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n    },\n    {\n      title: 'Rootly Service',\n      field: 'linked',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => {\n        return fetchService(rowData, reload);\n      },\n    },\n    {\n      title: 'Rootly Functionality',\n      field: 'linked',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => {\n        return fetchFunctionality(rowData, reload);\n      },\n    },\n    {\n      title: 'Rootly Team',\n      field: 'linked',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => {\n        return fetchTeam(rowData, reload);\n      },\n    },\n  ];\n\n  if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  const data = value\n    ? value.items.map(entity => {\n        const entityTriplet = stringifyEntityRef({\n          namespace: entity.metadata.namespace,\n          kind: entity.kind,\n          name: entity.metadata.name,\n        });\n        return { ...entity, id: entityTriplet, linkedService: undefined, linkedFunctionality: undefined, linkedTeam: undefined};\n      })\n    : [];\n\n  return (\n    <Table\n      isLoading={loading}\n      options={{\n        sorting: true,\n        search: true,\n        paging: true,\n        actionsColumnIndex: -1,\n        pageSize: 25,\n        pageSizeOptions: [25, 50, 100, 150, 200],\n        padding: 'dense',\n      }}\n      localization={{ header: { actions: undefined } }}\n      columns={columns}\n      data={data}\n    />\n  );\n};\n"],"names":["loading","error"],"mappings":"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"}
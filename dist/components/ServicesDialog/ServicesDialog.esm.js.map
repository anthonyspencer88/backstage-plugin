{"version":3,"file":"ServicesDialog.esm.js","sources":["../../../src/components/ServicesDialog/ServicesDialog.tsx"],"sourcesContent":["import { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Select, SelectedItems, SelectItem } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport { Alert } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport {\n  RootlyEntity,\n  RootlyService,\n} from '@rootly/backstage-plugin-common';\nimport { RootlyApiRef } from '../../api';\n\nexport const ServicesDialog = ({\n  open,\n  entity,\n  handleClose,\n  handleImport,\n  handleUpdate,\n}: {\n  open: boolean;\n  entity: RootlyEntity;\n  handleClose: (event: {}, reason: 'backdropClick' | 'escapeKeyDown') => void;\n  handleImport: Function;\n  handleUpdate: Function;\n}) => {\n  const RootlyApi = useApi(RootlyApiRef);\n  const [selectedItem, setSelectedItem] = useState('' as SelectedItems);\n\n  const {\n    value: response,\n    loading,\n    error,\n  } = useAsync(\n    async () =>\n      await RootlyApi.getServices({\n        filter: {\n          backstage_id: null,\n        },\n        page: { size: 999 },\n      }),\n  );\n\n  const data = response ? response.data : [];\n\n  useEffect(() => {\n    if (entity && data) {\n      const entityTriplet = stringifyEntityRef({\n        namespace: entity.metadata.namespace,\n        kind: entity.kind,\n        name: entity.metadata.name,\n      });\n      const item = data.find(\n        s => s.attributes.backstage_id === entityTriplet,\n      )?.id;\n      if (item) {\n        setSelectedItem(selectedItem);\n      }\n    }\n  }, [data]);\n\n  const onSelectedServiceChanged = (newSelectedItem: SelectedItems) => {\n    setSelectedItem(newSelectedItem);\n  };\n\n  const onImportAsNewServiceButtonClicked = () => {\n    handleImport(entity);\n  };\n\n  const onLinkToExistingServiceButtonClicked = () => {\n    handleUpdate(\n      entity,\n      { id: selectedItem } as RootlyService,\n      { id: entity.linkedService?.id } as RootlyService,\n    );\n  };\n\n  if (loading) {\n    return <></>;\n  } else if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n    >\n      <DialogTitle id=\"dialog-title\">Services</DialogTitle>\n      <DialogContent>\n        {entity && !entity.linkedService && (\n          <>\n            <Box sx={{ mx: 'auto' }} mb={2}>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={onImportAsNewServiceButtonClicked}\n              >\n                Import as new service\n              </Button>\n            </Box>\n            <Divider />\n          </>\n        )}\n        <Box sx={{ mx: 'auto' }} mt={2}>\n          <Typography>\n            Select a Rootly service you want to map this component to:\n          </Typography>\n          <Select\n            onChange={onSelectedServiceChanged}\n            selected={selectedItem}\n            placeholder=\"Select\"\n            label=\"Services\"\n            items={(data || []).map((service: RootlyService): SelectItem => {\n              return {\n                label: service.attributes.name,\n                value: service.id,\n              };\n            })}\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={onLinkToExistingServiceButtonClicked}>\n          Link\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n"],"names":[],"mappings":"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"}
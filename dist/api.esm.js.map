{"version":3,"file":"api.esm.js","sources":["../src/api.ts"],"sourcesContent":["import { stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  createApiRef,\n  DiscoveryApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport qs from 'qs';\nimport { Entity, Incident, Service, Functionality, Team } from './types';\n\nexport const RootlyApiRef = createApiRef<RootlyApi>({\n  id: 'plugin.rootly.service',\n});\n\nexport type ServicesFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport type FunctionalitiesFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport type TeamsFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport type IncidentsFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport interface Rootly {\n  getService(id_or_slug: String): Promise<ServiceResponse>;\n  getServices(opts?: ServicesFetchOpts): Promise<ServicesResponse>;\n  getFunctionality(id_or_slug: String): Promise<FunctionalityResponse>;\n  getFunctionalities(\n    opts?: FunctionalitiesFetchOpts,\n  ): Promise<FunctionalitiesResponse>;\n  getTeam(id_or_slug: String): Promise<TeamResponse>;\n  getTeams(opts?: TeamsFetchOpts): Promise<TeamsResponse>;\n  getIncidents(opts?: IncidentsFetchOpts): Promise<IncidentsResponse>;\n\n  importServiceEntity(entity: Entity): Promise<void>;\n  updateServiceEntity(\n    entity: Entity,\n    service: Service,\n    old_service?: Service,\n  ): Promise<void>;\n  deleteServiceEntity(service: Service): Promise<void>;\n\n  importFunctionalityEntity(entity: Entity): Promise<void>;\n  updateFunctionalityEntity(\n    entity: Entity,\n    functionality: Functionality,\n    old_functionality?: Functionality,\n  ): Promise<void>;\n  deleteFunctionalityEntity(functionality: Functionality): Promise<void>;\n\n  importTeamEntity(entity: Entity): Promise<void>;\n  updateTeamEntity(\n    entity: Entity,\n    functionality: Team,\n    old_functionality?: Team,\n  ): Promise<void>;\n  deleteTeamEntity(team: Team): Promise<void>;\n\n  getCreateIncidentURL(): string;\n  getListIncidents(): string;\n\n  getListIncidentsForServiceURL(service: Service): string;\n  getServiceDetailsURL(service: Service): string;\n  getServiceIncidentsChart(\n    service: Service,\n    opts?: { period: string },\n  ): Promise<{ data: object }>;\n\n  getListIncidentsForFunctionalityURL(functionality: Functionality): string;\n  getFunctionalityDetailsURL(functionality: Functionality): string;\n  getFunctionalityIncidentsChart(\n    functionality: Functionality,\n    opts?: { period: string },\n  ): Promise<{ data: object }>;\n\n  getListIncidentsForTeamURL(team: Team): string;\n  getTeamDetailsURL(team: Team): string;\n  getTeamIncidentsChart(\n    team: Team,\n    opts?: { period: string },\n  ): Promise<{ data: object }>;\n}\n\ninterface ServiceResponse {\n  data: Service;\n}\n\ninterface ServicesResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Service[];\n}\n\ninterface FunctionalityResponse {\n  data: Functionality;\n}\n\ninterface FunctionalitiesResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Functionality[];\n}\n\ninterface TeamResponse {\n  data: Team;\n}\n\ninterface TeamsResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Team[];\n}\n\ninterface IncidentsResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Incident[];\n  included: object[];\n  links: {\n    first: string;\n    last: string;\n    next?: string;\n    prev?: string;\n    self: string;\n  };\n}\n\nconst DEFAULT_PROXY_PATH = '/rootly/api';\n\ntype Options = {\n  discoveryApi: DiscoveryApi;\n  identityApi: IdentityApi;\n\n  /**\n   * Domain used by users to access Rootly web UI.\n   * Example: https://rootly.com\n   */\n  domain: string;\n\n  /**\n   * Path to use for requests via the proxy, defaults to /rootly/api\n   */\n  proxyPath?: string;\n};\n\n/**\n * API to talk to Rootly.\n */\nexport class RootlyApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly identityApi: IdentityApi;\n  private readonly proxyPath: string;\n  private readonly domain: string;\n\n  constructor(opts: Options) {\n    this.discoveryApi = opts.discoveryApi;\n    this.identityApi = opts.identityApi;\n    this.domain = opts.domain;\n    this.proxyPath = opts.proxyPath ?? DEFAULT_PROXY_PATH;\n  }\n\n  private async fetch<T = any>(input: string, init?: RequestInit): Promise<T> {\n    const apiUrl = await this.apiUrl();\n    const authedInit = await this.addAuthHeaders(init || {});\n\n    const resp = await fetch(`${apiUrl}${input}`, authedInit);\n    if (!resp.ok) {\n      throw new Error(`Request failed with ${resp.status} ${resp.statusText}`);\n    }\n\n    return await resp.json();\n  }\n\n  private async call(input: string, init?: RequestInit): Promise<void> {\n    const apiUrl = await this.apiUrl();\n    const authedInit = await this.addAuthHeaders(init || {});\n\n    const resp = await fetch(`${apiUrl}${input}`, authedInit);\n    if (!resp.ok)\n      throw new Error(`Request failed with ${resp.status}: ${resp.statusText}`);\n  }\n\n  async getService(id_or_slug: String): Promise<ServiceResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const response = await this.fetch<ServiceResponse>(\n      `/v1/services/${id_or_slug}`,\n      init,\n    );\n    return response;\n  }\n\n  async getServices(opts?: ServicesFetchOpts): Promise<ServicesResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<ServicesResponse>(\n      `/v1/services?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getFunctionality(id_or_slug: String): Promise<FunctionalityResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const response = await this.fetch<FunctionalityResponse>(\n      `/v1/functionalities/${id_or_slug}`,\n      init,\n    );\n    return response;\n  }\n\n  async getFunctionalities(\n    opts?: FunctionalitiesFetchOpts,\n  ): Promise<FunctionalitiesResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<FunctionalitiesResponse>(\n      `/v1/functionalities?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getTeam(id_or_slug: String): Promise<TeamResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const response = await this.fetch<TeamResponse>(\n      `/v1/teams/${id_or_slug}`,\n      init,\n    );\n    return response;\n  }\n\n  async getTeams(opts?: TeamsFetchOpts): Promise<TeamsResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<TeamsResponse>(\n      `/v1/teams?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getIncidents(opts?: IncidentsFetchOpts): Promise<IncidentsResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<IncidentsResponse>(\n      `/v1/incidents?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getServiceIncidentsChart(\n    service: Service,\n    opts?: { period: string },\n  ): Promise<{ data: object }> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<{ data: object }>(\n      `/v1/services/${service.id}/incidents_chart?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getFunctionalityIncidentsChart(\n    functionality: Functionality,\n    opts?: { period: string },\n  ): Promise<{ data: object }> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<{ data: object }>(\n      `/v1/functionalities/${functionality.id}/incidents_chart?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getTeamIncidentsChart(\n    team: Team,\n    opts?: { period: string },\n  ): Promise<{ data: object }> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<{ data: object }>(\n      `/v1/teams/${team.id}/incidents_chart?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async importServiceEntity(entity: Entity): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const init = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            name: entity.metadata.name,\n            description: entity.metadata.description,\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services`, init);\n  }\n\n  async updateServiceEntity(\n    entity: Entity,\n    service: Service,\n    old_service?: Service,\n  ): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    if (old_service?.id) {\n      const init1 = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/vnd.api+json' },\n        body: JSON.stringify({\n          data: {\n            type: 'services',\n            attributes: {\n              backstage_id: null,\n            },\n          },\n        }),\n      };\n\n      await this.call(`/v1/services/${old_service.id}`, init1);\n    }\n\n    const init2 = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services/${service.id}`, init2);\n  }\n\n  async deleteServiceEntity(service: Service): Promise<void> {\n    const init = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            backstage_id: null,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services/${service.id}`, init);\n  }\n\n  async importFunctionalityEntity(entity: Entity): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const init = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'functionalities',\n          attributes: {\n            name: entity.metadata.name,\n            description: entity.metadata.description,\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/functionalities`, init);\n  }\n\n  async updateFunctionalityEntity(\n    entity: Entity,\n    functionality: Functionality,\n    old_functionality?: Functionality,\n  ): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    if (old_functionality?.id) {\n      const init1 = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/vnd.api+json' },\n        body: JSON.stringify({\n          data: {\n            type: 'functionalities',\n            attributes: {\n              backstage_id: null,\n            },\n          },\n        }),\n      };\n\n      await this.call(`/v1/functionalities/${old_functionality.id}`, init1);\n    }\n\n    const init2 = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'functionalities',\n          attributes: {\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/functionalities/${functionality.id}`, init2);\n  }\n\n  async deleteFunctionalityEntity(functionality: Functionality): Promise<void> {\n    const init = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'functionalities',\n          attributes: {\n            backstage_id: null,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/functionalities/${functionality.id}`, init);\n  }\n\n  async importTeamEntity(entity: Entity): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const init = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'teams',\n          attributes: {\n            name: entity.metadata.name,\n            description: entity.metadata.description,\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/teams`, init);\n  }\n\n  async updateTeamEntity(\n    entity: Entity,\n    team: Team,\n    old_team?: Team,\n  ): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    if (old_team?.id) {\n      const init1 = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/vnd.api+json' },\n        body: JSON.stringify({\n          data: {\n            type: 'teams',\n            attributes: {\n              backstage_id: null,\n            },\n          },\n        }),\n      };\n\n      await this.call(`/v1/teams/${old_team.id}`, init1);\n    }\n\n    const init2 = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'teams',\n          attributes: {\n            backstage_id: entityTriplet,\n            pagerduty_id: entity.metadata.annotations?.['pagerduty.com/service-id'],\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/teams/${team.id}`, init2);\n  }\n\n  async deleteTeamEntity(team: Team): Promise<void> {\n    const init = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'teams',\n          attributes: {\n            backstage_id: null,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/teams/${team.id}`, init);\n  }\n\n  getCreateIncidentURL(): string {\n    return `${this.domain}/account/incidents/new`;\n  }\n\n  getListIncidents(): string {\n    return `${this.domain}/account/incidents`;\n  }\n\n  getListIncidentsForServiceURL(service: Service): string {\n    const params = qs.stringify(\n      { filter: { filters: [{ services: [service.id] }] } },\n      { arrayFormat: 'brackets' },\n    );\n    return `${this.domain}/account/incidents?${params}`;\n  }\n\n  getListIncidentsForFunctionalityURL(functionality: Functionality): string {\n    const params = qs.stringify(\n      { filter: { filters: [{ functionalities: [functionality.id] }] } },\n      { arrayFormat: 'brackets' },\n    );\n    return `${this.domain}/account/incidents?${params}`;\n  }\n\n  getListIncidentsForTeamURL(team: Team): string {\n    const params = qs.stringify(\n      { filter: { filters: [{ groups: [team.id] }] } },\n      { arrayFormat: 'brackets' },\n    );\n    return `${this.domain}/account/incidents?${params}`;\n  }\n\n  getServiceDetailsURL(service: Service): string {\n    return `${this.domain}/account/services/${service.attributes.slug}`;\n  }\n\n  getFunctionalityDetailsURL(functionality: Functionality): string {\n    return `${this.domain}/account/functionalities/${functionality.attributes.slug}`;\n  }\n\n  getTeamDetailsURL(team: Team): string {\n    return `${this.domain}/account/teams/${team.attributes.slug}`;\n  }\n\n  private async apiUrl() {\n    const proxyUrl = await this.discoveryApi.getBaseUrl('proxy');\n    return proxyUrl + this.proxyPath;\n  }\n\n  private async addAuthHeaders(init: RequestInit): Promise<RequestInit> {\n    const { token } = await this.identityApi.getCredentials();\n    const headers = init.headers || {};\n\n    return {\n      ...init,\n      headers: {\n        ...headers,\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      },\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
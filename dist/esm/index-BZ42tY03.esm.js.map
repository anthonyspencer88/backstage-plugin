{"version":3,"file":"index-BZ42tY03.esm.js","sources":["../../src/types.ts","../../src/components/Entity/RootlyOverviewServiceCard.tsx","../../src/components/Entity/RootlyOverviewFunctionalityCard.tsx","../../src/components/Entity/RootlyOverviewTeamCard.tsx","../../src/components/Entity/RootlyOverviewCard.tsx"],"sourcesContent":["import { Entity as BackstageEntity } from '@backstage/catalog-model';\n\nexport interface Service {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    public_description: string | undefined;\n    color: string;\n    notify_emails: string[];\n    slack_channels: object[];\n    slack_aliases: object[];\n    backstage_id: string | undefined;\n    incidents_count: BigInteger;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface Functionality {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    public_description: string | undefined;\n    color: string;\n    user: { data: User } | undefined;\n    severity: { data: Severity } | undefined;\n    notify_emails: string[];\n    slack_channels: object[];\n    slack_aliases: object[];\n    backstage_id: string | undefined;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface Relationship {\n  id: string;\n  type: string;\n  data: [{ id: string; type: string }];\n}\n\nexport interface User {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    email: string;\n    full_name: string;\n  };\n}\n\nexport interface Team {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    color: string;\n    backstage_id: string | undefined;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface IncidentType {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    color: string;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface Environment {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    color: string;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface Severity {\n  id: string;\n  attributes: {\n    name: string;\n    slug: string;\n    description: string | undefined;\n    severity: string | undefined;\n    color: string;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface ResponderRef {\n  id: string;\n  type: string; // \"team\", \"user\"\n}\n\nexport interface Incident {\n  id: string;\n  type: string;\n  attributes: {\n    title: string;\n    slug: string;\n    summary: string | undefined;\n    status: string;\n    labels: string[];\n    severity: { data: Severity } | undefined;\n    user: { data: User } | undefined;\n    url: string;\n    created_at: string;\n    updated_at: string;\n  };\n  relationships: {\n    services: Relationship | undefined;\n    functionalities: Relationship | undefined;\n    incident_types: Relationship | undefined;\n    environments: Relationship | undefined;\n    groups: Relationship | undefined;\n  };\n  included: [\n    {\n      id: string;\n      type: string;\n      attributes: Team | Environment | Service | Functionality | IncidentType;\n    },\n  ];\n}\n\nexport interface Entity extends BackstageEntity {\n  linkedService: Service | undefined;\n  linkedFunctionality: Functionality | undefined;\n  linkedTeam: Team | undefined;\n}\n\nexport enum RootlyResourceType {\n  Service = \"Service\",\n  Functionality = \"Functionality\",\n  Team = \"Team\",\n}\n","import { stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  HeaderIconLinkRow,\n  IconLinkVerticalProps,\n  Progress,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport { FilterList } from '@material-ui/icons';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\nimport { Alert } from '@material-ui/lab';\nimport { LineChart } from 'react-chartkick';\nimport { blue } from '@material-ui/core/colors';\nimport 'chartkick/chart.js';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { Rootly, RootlyApiRef } from '../../api';\nimport { Entity, Incident, Service } from '../../types';\nimport { ColoredChip } from '../UI/ColoredChip';\nimport { StatusChip } from '../UI/StatusChip';\nimport {\n  autoImportService,\n  ROOTLY_ANNOTATION_SERVICE_ID,\n  ROOTLY_ANNOTATION_SERVICE_SLUG,\n} from '../../integration';\n\nconst truncate = (input: string, length: number) =>\n  input.length > length ? `${input.substring(0, length)}...` : input;\n\nconst IncidentListItem = ({\n  incident,\n}: {\n  incident: Incident;\n  rootlyApi: Rootly;\n}) => {\n  return (\n    <ListItem dense key={incident.id} style={{ paddingLeft: 0 }}>\n      <ListItemText\n        primary={\n          <>\n            <Link\n              style={{ marginRight: 8 }}\n              target=\"blank\"\n              href={incident.attributes.url}\n            >\n              {truncate(incident.attributes.title, 100)}\n            </Link>\n            <ColoredChip\n              label={incident.attributes.severity?.data.attributes.name}\n              tooltip={\n                incident.attributes.severity?.data.attributes.description\n              }\n              color={incident.attributes.severity?.data.attributes.color}\n            />\n          </>\n        }\n        primaryTypographyProps={{\n          variant: 'body1',\n        }}\n        secondary={\n          <Typography noWrap variant=\"body2\" color=\"textSecondary\">\n            Created {moment(incident.attributes.created_at).fromNow()}\n          </Typography>\n        }\n      />\n      <ListItemSecondaryAction>\n        <StatusChip status={incident.attributes.status} />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nconst getViewIncidentsForServiceLink = (\n  service: Service,\n  rootlyApi: Rootly,\n) => {\n  return {\n    label: 'View Incidents',\n    disabled: false,\n    icon: <FilterList />,\n    href: rootlyApi.getListIncidentsForServiceURL(service),\n  };\n};\n\nexport const RootlyOverviewServiceCard = () => {\n  const { entity } = useEntity();\n  const RootlyApi = useApi(RootlyApiRef);\n\n  const service_id_annotation =\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_ID] ||\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_SLUG];\n\n  const [reload, setReload] = useState(false);\n\n  const createIncidentLink: IconLinkVerticalProps = {\n    label: 'Create Incident',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getCreateIncidentURL(),\n  };\n\n  const viewIncidentsLink: IconLinkVerticalProps = {\n    label: 'View All Incidents',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getListIncidents(),\n  };\n\n  const entityTriplet = stringifyEntityRef({\n    namespace: entity.metadata.namespace,\n    kind: entity.kind,\n    name: entity.metadata.name,\n  });\n\n  useEffect(() => {\n    if (service_id_annotation) {\n      RootlyApi.getService(service_id_annotation)\n        .then(annotationServiceResponse => {\n          const annotationService = annotationServiceResponse.data;\n          if (\n            annotationService.attributes.backstage_id &&\n            annotationService.attributes.backstage_id !== entityTriplet\n          ) {\n            RootlyApi.getServices({\n              filter: {\n                backstage_id: entityTriplet,\n              },\n            }).then(servicesResponse => {\n              const service =\n                servicesResponse &&\n                servicesResponse.data &&\n                servicesResponse.data.length > 0\n                  ? servicesResponse.data[0]\n                  : null;\n              if (service) {\n                RootlyApi.updateServiceEntity(\n                  entity as Entity,\n                  annotationService,\n                  service,\n                );\n              }\n            });\n          } else {\n            RootlyApi.updateServiceEntity(entity as Entity, annotationService);\n          }\n        })\n        .catch(() => {\n          if (autoImportService(entity)) {\n            RootlyApi.importServiceEntity(entity as Entity);\n          }\n        });\n    }\n  }, []);\n\n  const {\n    value: serviceResponse,\n    loading: serviceLoading,\n    error: serviceError,\n  } = useAsync(\n    async () =>\n      await RootlyApi.getServices({\n        filter: {\n          backstage_id: entityTriplet,\n        },\n      }),\n    [reload],\n  );\n\n  const service =\n    serviceResponse && serviceResponse.data && serviceResponse.data.length > 0\n      ? serviceResponse.data[0]\n      : null;\n\n  const {\n    value: incidentsResponse,\n    loading: incidentsLoading,\n    error: incidentsError,\n  } = useAsync(\n    async () =>\n      service\n        ? await RootlyApi.getIncidents({\n            filter: {\n              services: service.attributes.slug,\n              status: 'started,mitigated',\n            },\n          })\n        : { data: [] },\n    [service],\n  );\n\n  const {\n    value: chartResponse,\n    loading: chartLoading,\n    error: chartError,\n  } = useAsync(\n    async () =>\n      service\n        ? await RootlyApi.getServiceIncidentsChart(service, {\n            period: 'day',\n          })\n        : { data: [] },\n    [service],\n  );\n\n  const incidents =\n    incidentsResponse &&\n    incidentsResponse.data &&\n    incidentsResponse.data.length > 0\n      ? incidentsResponse.data\n      : null;\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Rootly\"\n        action={\n          <>\n            {service && (\n              <IconButton\n                component={Link}\n                aria-label=\"Refresh\"\n                disabled={false}\n                title=\"Refresh\"\n                onClick={() => setReload(!reload)}\n              >\n                <CachedIcon />\n              </IconButton>\n            )}\n          </>\n        }\n        subheader={\n          <HeaderIconLinkRow\n            links={\n              !serviceLoading && service\n                ? [\n                    createIncidentLink,\n                    getViewIncidentsForServiceLink(service, RootlyApi),\n                    viewIncidentsLink,\n                  ]\n                : [createIncidentLink, viewIncidentsLink]\n            }\n          />\n        }\n      />\n      {service && (\n        <>\n          <Divider />\n          {!chartLoading && !chartError && chartResponse && (\n            <>\n              <CardContent>\n                <Typography variant=\"subtitle1\">\n                  Incidents over last 30 days\n                </Typography>\n                <LineChart\n                  data={chartResponse.data}\n                  height=\"150px\"\n                  colors={[blue[300]]}\n                />\n              </CardContent>\n              <Divider />\n            </>\n          )}\n        </>\n      )}\n      <CardContent>\n        {(serviceLoading || incidentsLoading) && <Progress />}\n        {serviceError && <Alert severity=\"error\">{serviceError.message}</Alert>}\n        {incidentsError && (\n          <Alert severity=\"error\">{incidentsError.message}</Alert>\n        )}\n        {!incidentsLoading &&\n          !incidentsError &&\n          !incidentsLoading &&\n          incidents && (\n            <>\n              {incidents && incidents.length >= 0 && (\n                <Typography variant=\"subtitle1\">\n                  There is <strong>{incidents.length}</strong> ongoing incidents\n                  for this service\n                </Typography>\n              )}\n              {incidents && incidents.length === 0 && (\n                <Typography variant=\"subtitle1\">\n                  No ongoing incidents\n                </Typography>\n              )}\n              <List dense>\n                {incidents &&\n                  incidents.map((incident: Incident) => (\n                    <IncidentListItem\n                      incident={incident}\n                      rootlyApi={RootlyApi}\n                    />\n                  ))}\n              </List>\n            </>\n          )}\n      </CardContent>\n    </Card>\n  );\n};\n","import { stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  HeaderIconLinkRow,\n  IconLinkVerticalProps,\n  Progress,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport { FilterList } from '@material-ui/icons';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\nimport { Alert } from '@material-ui/lab';\nimport { LineChart } from 'react-chartkick';\nimport { blue } from '@material-ui/core/colors';\nimport 'chartkick/chart.js';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { Rootly, RootlyApiRef } from '../../api';\nimport { Entity, Incident, Functionality } from '../../types';\nimport { ColoredChip } from '../UI/ColoredChip';\nimport { StatusChip } from '../UI/StatusChip';\nimport {\n  autoImportFunctionality,\n  ROOTLY_ANNOTATION_FUNCTIONALITY_ID,\n  ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG,\n} from '../../integration';\n\nconst truncate = (input: string, length: number) =>\n  input.length > length ? `${input.substring(0, length)}...` : input;\n\nconst IncidentListItem = ({\n  incident,\n}: {\n  incident: Incident;\n  rootlyApi: Rootly;\n}) => {\n  return (\n    <ListItem dense key={incident.id} style={{ paddingLeft: 0 }}>\n      <ListItemText\n        primary={\n          <>\n            <Link\n              style={{ marginRight: 8 }}\n              target=\"blank\"\n              href={incident.attributes.url}\n            >\n              {truncate(incident.attributes.title, 100)}\n            </Link>\n            <ColoredChip\n              label={incident.attributes.severity?.data.attributes.name}\n              tooltip={\n                incident.attributes.severity?.data.attributes.description\n              }\n              color={incident.attributes.severity?.data.attributes.color}\n            />\n          </>\n        }\n        primaryTypographyProps={{\n          variant: 'body1',\n        }}\n        secondary={\n          <Typography noWrap variant=\"body2\" color=\"textSecondary\">\n            Created {moment(incident.attributes.created_at).fromNow()}\n          </Typography>\n        }\n      />\n      <ListItemSecondaryAction>\n        <StatusChip status={incident.attributes.status} />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nconst getViewIncidentsForFunctionalityLink = (\n  functionality: Functionality,\n  rootlyApi: Rootly,\n) => {\n  return {\n    label: 'View Incidents',\n    disabled: false,\n    icon: <FilterList />,\n    href: rootlyApi.getListIncidentsForFunctionalityURL(functionality),\n  };\n};\n\nexport const RootlyOverviewFunctionalityCard = () => {\n  const { entity } = useEntity();\n  const RootlyApi = useApi(RootlyApiRef);\n\n  const functionality_id_annotation =\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_FUNCTIONALITY_ID] ||\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG];\n\n  const [reload, setReload] = useState(false);\n\n  const createIncidentLink: IconLinkVerticalProps = {\n    label: 'Create Incident',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getCreateIncidentURL(),\n  };\n\n  const viewIncidentsLink: IconLinkVerticalProps = {\n    label: 'View All Incidents',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getListIncidents(),\n  };\n\n  const entityTriplet = stringifyEntityRef({\n    namespace: entity.metadata.namespace,\n    kind: entity.kind,\n    name: entity.metadata.name,\n  });\n\n  useEffect(() => {\n    if (functionality_id_annotation) {\n      RootlyApi.getFunctionality(functionality_id_annotation)\n        .then(annotationFunctionalityResponse => {\n          const annotationFunctionality = annotationFunctionalityResponse.data;\n          if (\n            annotationFunctionality.attributes.backstage_id &&\n            annotationFunctionality.attributes.backstage_id !== entityTriplet\n          ) {\n            RootlyApi.getFunctionalities({\n              filter: {\n                backstage_id: entityTriplet,\n              },\n            }).then(functionalitiesResponse => {\n              const functionality =\n                functionalitiesResponse &&\n                functionalitiesResponse.data &&\n                functionalitiesResponse.data.length > 0\n                  ? functionalitiesResponse.data[0]\n                  : null;\n              if (functionality) {\n                RootlyApi.updateFunctionalityEntity(\n                  entity as Entity,\n                  annotationFunctionality,\n                  functionality,\n                );\n              }\n            });\n          } else {\n            RootlyApi.updateFunctionalityEntity(entity as Entity, annotationFunctionality);\n          }\n        })\n        .catch(() => {\n          if (autoImportFunctionality(entity)) {\n            RootlyApi.importFunctionalityEntity(entity as Entity);\n          }\n        });\n    }\n  }, []);\n\n  const {\n    value: functionalityResponse,\n    loading: functionalityLoading,\n    error: functionalityError,\n  } = useAsync(\n    async () =>\n      await RootlyApi.getFunctionalities({\n        filter: {\n          backstage_id: entityTriplet,\n        },\n      }),\n    [reload],\n  );\n\n  const functionality =\n    functionalityResponse && functionalityResponse.data && functionalityResponse.data.length > 0\n      ? functionalityResponse.data[0]\n      : null;\n\n  const {\n    value: incidentsResponse,\n    loading: incidentsLoading,\n    error: incidentsError,\n  } = useAsync(\n    async () =>\n      functionality\n        ? await RootlyApi.getIncidents({\n            filter: {\n              functionalities: functionality.attributes.slug,\n              status: 'started,mitigated',\n            },\n          })\n        : { data: [] },\n    [functionality],\n  );\n\n  const {\n    value: chartResponse,\n    loading: chartLoading,\n    error: chartError,\n  } = useAsync(\n    async () =>\n      functionality\n        ? await RootlyApi.getFunctionalityIncidentsChart(functionality, {\n            period: 'day',\n          })\n        : { data: [] },\n    [functionality],\n  );\n\n  const incidents =\n    incidentsResponse &&\n    incidentsResponse.data &&\n    incidentsResponse.data.length > 0\n      ? incidentsResponse.data\n      : null;\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Rootly\"\n        action={\n          <>\n            {functionality && (\n              <IconButton\n                component={Link}\n                aria-label=\"Refresh\"\n                disabled={false}\n                title=\"Refresh\"\n                onClick={() => setReload(!reload)}\n              >\n                <CachedIcon />\n              </IconButton>\n            )}\n          </>\n        }\n        subheader={\n          <HeaderIconLinkRow\n            links={\n              !functionalityLoading && functionality\n                ? [\n                    createIncidentLink,\n                    getViewIncidentsForFunctionalityLink(functionality, RootlyApi),\n                    viewIncidentsLink,\n                  ]\n                : [createIncidentLink, viewIncidentsLink]\n            }\n          />\n        }\n      />\n      {functionality && (\n        <>\n          <Divider />\n          {!chartLoading && !chartError && chartResponse && (\n            <>\n              <CardContent>\n                <Typography variant=\"subtitle1\">\n                  Incidents over last 30 days\n                </Typography>\n                <LineChart\n                  data={chartResponse.data}\n                  height=\"150px\"\n                  colors={[blue[300]]}\n                />\n              </CardContent>\n              <Divider />\n            </>\n          )}\n        </>\n      )}\n      <CardContent>\n        {(functionalityLoading || incidentsLoading) && <Progress />}\n        {functionalityError && <Alert severity=\"error\">{functionalityError.message}</Alert>}\n        {incidentsError && (\n          <Alert severity=\"error\">{incidentsError.message}</Alert>\n        )}\n        {!incidentsLoading &&\n          !incidentsError &&\n          !incidentsLoading &&\n          incidents && (\n            <>\n              {incidents && incidents.length >= 0 && (\n                <Typography variant=\"subtitle1\">\n                  There is <strong>{incidents.length}</strong> ongoing incidents\n                  for this functionality\n                </Typography>\n              )}\n              {incidents && incidents.length === 0 && (\n                <Typography variant=\"subtitle1\">\n                  No ongoing incidents\n                </Typography>\n              )}\n              <List dense>\n                {incidents &&\n                  incidents.map((incident: Incident) => (\n                    <IncidentListItem\n                      incident={incident}\n                      rootlyApi={RootlyApi}\n                    />\n                  ))}\n              </List>\n            </>\n          )}\n      </CardContent>\n    </Card>\n  );\n};\n","import { stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  HeaderIconLinkRow,\n  IconLinkVerticalProps,\n  Progress,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport { FilterList } from '@material-ui/icons';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\nimport { Alert } from '@material-ui/lab';\nimport { LineChart } from 'react-chartkick';\nimport { blue } from '@material-ui/core/colors';\nimport 'chartkick/chart.js';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { Rootly, RootlyApiRef } from '../../api';\nimport { Entity, Incident, Team } from '../../types';\nimport { ColoredChip } from '../UI/ColoredChip';\nimport { StatusChip } from '../UI/StatusChip';\nimport {\n  autoImportTeam,\n  ROOTLY_ANNOTATION_TEAM_ID,\n  ROOTLY_ANNOTATION_TEAM_SLUG,\n} from '../../integration';\n\nconst truncate = (input: string, length: number) =>\n  input.length > length ? `${input.substring(0, length)}...` : input;\n\nconst IncidentListItem = ({\n  incident,\n}: {\n  incident: Incident;\n  rootlyApi: Rootly;\n}) => {\n  return (\n    <ListItem dense key={incident.id} style={{ paddingLeft: 0 }}>\n      <ListItemText\n        primary={\n          <>\n            <Link\n              style={{ marginRight: 8 }}\n              target=\"blank\"\n              href={incident.attributes.url}\n            >\n              {truncate(incident.attributes.title, 100)}\n            </Link>\n            <ColoredChip\n              label={incident.attributes.severity?.data.attributes.name}\n              tooltip={\n                incident.attributes.severity?.data.attributes.description\n              }\n              color={incident.attributes.severity?.data.attributes.color}\n            />\n          </>\n        }\n        primaryTypographyProps={{\n          variant: 'body1',\n        }}\n        secondary={\n          <Typography noWrap variant=\"body2\" color=\"textSecondary\">\n            Created {moment(incident.attributes.created_at).fromNow()}\n          </Typography>\n        }\n      />\n      <ListItemSecondaryAction>\n        <StatusChip status={incident.attributes.status} />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nconst getViewIncidentsForTeamLink = (\n  team: Team,\n  rootlyApi: Rootly,\n) => {\n  return {\n    label: 'View Incidents',\n    disabled: false,\n    icon: <FilterList />,\n    href: rootlyApi.getListIncidentsForTeamURL(team),\n  };\n};\n\nexport const RootlyOverviewTeamCard = () => {\n  const { entity } = useEntity();\n  const RootlyApi = useApi(RootlyApiRef);\n\n  const team_id_annotation =\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_TEAM_ID] ||\n    entity.metadata.annotations?.[ROOTLY_ANNOTATION_TEAM_SLUG];\n\n  const [reload, setReload] = useState(false);\n\n  const createIncidentLink: IconLinkVerticalProps = {\n    label: 'Create Incident',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getCreateIncidentURL(),\n  };\n\n  const viewIncidentsLink: IconLinkVerticalProps = {\n    label: 'View All Incidents',\n    disabled: false,\n    icon: <WhatshotIcon />,\n    href: RootlyApi.getListIncidents(),\n  };\n\n  const entityTriplet = stringifyEntityRef({\n    namespace: entity.metadata.namespace,\n    kind: entity.kind,\n    name: entity.metadata.name,\n  });\n\n  useEffect(() => {\n    if (team_id_annotation) {\n      RootlyApi.getTeam(team_id_annotation)\n        .then(annotationTeamResponse => {\n          const annotationTeam = annotationTeamResponse.data;\n          if (\n            annotationTeam.attributes.backstage_id &&\n            annotationTeam.attributes.backstage_id !== entityTriplet\n          ) {\n            RootlyApi.getTeams({\n              filter: {\n                backstage_id: entityTriplet,\n              },\n            }).then(teamsResponse => {\n              const team =\n                teamsResponse &&\n                teamsResponse.data &&\n                teamsResponse.data.length > 0\n                  ? teamsResponse.data[0]\n                  : null;\n              if (team) {\n                RootlyApi.updateTeamEntity(\n                  entity as Entity,\n                  annotationTeam,\n                  team,\n                );\n              }\n            });\n          } else {\n            RootlyApi.updateTeamEntity(entity as Entity, annotationTeam);\n          }\n        })\n        .catch(() => {\n          if (autoImportTeam(entity)) {\n            RootlyApi.importTeamEntity(entity as Entity);\n          }\n        });\n    }\n  }, []);\n\n  const {\n    value: teamResponse,\n    loading: teamLoading,\n    error: teamError,\n  } = useAsync(\n    async () =>\n      await RootlyApi.getTeams({\n        filter: {\n          backstage_id: entityTriplet,\n        },\n      }),\n    [reload],\n  );\n\n  const team =\n    teamResponse && teamResponse.data && teamResponse.data.length > 0\n      ? teamResponse.data[0]\n      : null;\n\n  const {\n    value: incidentsResponse,\n    loading: incidentsLoading,\n    error: incidentsError,\n  } = useAsync(\n    async () =>\n      team\n        ? await RootlyApi.getIncidents({\n            filter: {\n              teams: team.attributes.slug,\n              status: 'started,mitigated',\n            },\n          })\n        : { data: [] },\n    [team],\n  );\n\n  const {\n    value: chartResponse,\n    loading: chartLoading,\n    error: chartError,\n  } = useAsync(\n    async () =>\n      team\n        ? await RootlyApi.getTeamIncidentsChart(team, {\n            period: 'day',\n          })\n        : { data: [] },\n    [team],\n  );\n\n  const incidents =\n    incidentsResponse &&\n    incidentsResponse.data &&\n    incidentsResponse.data.length > 0\n      ? incidentsResponse.data\n      : null;\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Rootly\"\n        action={\n          <>\n            {team && (\n              <IconButton\n                component={Link}\n                aria-label=\"Refresh\"\n                disabled={false}\n                title=\"Refresh\"\n                onClick={() => setReload(!reload)}\n              >\n                <CachedIcon />\n              </IconButton>\n            )}\n          </>\n        }\n        subheader={\n          <HeaderIconLinkRow\n            links={\n              !teamLoading && team\n                ? [\n                    createIncidentLink,\n                    getViewIncidentsForTeamLink(team, RootlyApi),\n                    viewIncidentsLink,\n                  ]\n                : [createIncidentLink, viewIncidentsLink]\n            }\n          />\n        }\n      />\n      {team && (\n        <>\n          <Divider />\n          {!chartLoading && !chartError && chartResponse && (\n            <>\n              <CardContent>\n                <Typography variant=\"subtitle1\">\n                  Incidents over last 30 days\n                </Typography>\n                <LineChart\n                  data={chartResponse.data}\n                  height=\"150px\"\n                  colors={[blue[300]]}\n                />\n              </CardContent>\n              <Divider />\n            </>\n          )}\n        </>\n      )}\n      <CardContent>\n        {(teamLoading || incidentsLoading) && <Progress />}\n        {teamError && <Alert severity=\"error\">{teamError.message}</Alert>}\n        {incidentsError && (\n          <Alert severity=\"error\">{incidentsError.message}</Alert>\n        )}\n        {!incidentsLoading &&\n          !incidentsError &&\n          !incidentsLoading &&\n          incidents && (\n            <>\n              {incidents && incidents.length >= 0 && (\n                <Typography variant=\"subtitle1\">\n                  There is <strong>{incidents.length}</strong> ongoing incidents\n                  for this team\n                </Typography>\n              )}\n              {incidents && incidents.length === 0 && (\n                <Typography variant=\"subtitle1\">\n                  No ongoing incidents\n                </Typography>\n              )}\n              <List dense>\n                {incidents &&\n                  incidents.map((incident: Incident) => (\n                    <IncidentListItem\n                      incident={incident}\n                      rootlyApi={RootlyApi}\n                    />\n                  ))}\n              </List>\n            </>\n          )}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { RootlyResourceType } from '../../types';\nimport { RootlyOverviewServiceCard } from './RootlyOverviewServiceCard';\nimport { RootlyOverviewFunctionalityCard } from './RootlyOverviewFunctionalityCard';\nimport { RootlyOverviewTeamCard } from './RootlyOverviewTeamCard';\n\nexport const RootlyOverviewCard = (resourceType: RootlyResourceType) => {\n  const resource = () => {\n    switch (resourceType) {\n      case RootlyResourceType.Service:\n        // eslint-disable-next-line new-cap\n        return RootlyOverviewServiceCard();\n      case RootlyResourceType.Functionality:\n        // eslint-disable-next-line new-cap\n        return RootlyOverviewFunctionalityCard();\n      case RootlyResourceType.Team:\n        // eslint-disable-next-line new-cap\n        return RootlyOverviewTeamCard();\n      default:\n        // eslint-disable-next-line new-cap\n        return RootlyOverviewServiceCard();\n    }\n  };\n\n  return (<div>{resource()}</div>);\n};\n"],"names":["RootlyResourceType","truncate","IncidentListItem","service","functionality","team"],"mappings":"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"}
{"version":3,"file":"index-BTeRrTSg.esm.js","sources":["../../src/api.ts","../../src/plugin.ts","../../src/extensions.tsx","../../src/integration.ts","../../src/components/ServicesTable/ServicesTable.tsx","../../src/components/Incident/index.ts","../../src/components/UI/ColoredChip.tsx","../../src/components/UI/ColoredChips.tsx","../../src/components/UI/StatusChip.tsx","../../src/components/IncidentsTable/IncidentsTable.tsx","../../src/components/ServicesDialog/ServicesDialog.tsx"],"sourcesContent":["import { stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  createApiRef,\n  DiscoveryApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport qs from 'qs';\nimport { Entity, Incident, Service } from './types';\n\nexport const RootlyApiRef = createApiRef<Rootly>({\n  id: 'plugin.rootly.service',\n});\n\nexport type ServicesFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport type IncidentsFetchOpts = {\n  page?: {\n    number?: number;\n    size?: number;\n  };\n  filter?: object;\n  include?: string;\n};\n\nexport interface Rootly {\n  getService(id_or_slug: String): Promise<ServiceResponse>;\n  getServices(opts?: ServicesFetchOpts): Promise<ServicesResponse>;\n  getIncidents(opts?: IncidentsFetchOpts): Promise<IncidentsResponse>;\n  importEntity(entity: Entity): Promise<void>;\n  updateEntity(\n    entity: Entity,\n    service: Service,\n    old_service?: Service,\n  ): Promise<void>;\n  deleteEntity(service: Service): Promise<void>;\n\n  getCreateIncidentURL(): string;\n  getListIncidents(): string;\n  getListIncidentsForServiceURL(service: Service): string;\n  getServiceDetailsURL(service: Service): string;\n\n  getServiceIncidentsChart(service: Service, opts?: {period: string}): Promise<{data: object}>;\n}\n\ninterface ServiceResponse {\n  data: Service;\n}\n\ninterface ServicesResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Service[];\n}\n\ninterface IncidentsResponse {\n  meta: {\n    total_count: number;\n    total_pages: number;\n  };\n  data: Incident[];\n  included: object[];\n  links: {\n    first: string;\n    last: string;\n    next?: string;\n    prev?: string;\n    self: string;\n  };\n}\n\nconst DEFAULT_PROXY_PATH = '/rootly/api';\n\ntype Options = {\n  discoveryApi: DiscoveryApi;\n  identityApi: IdentityApi;\n\n  /**\n   * Domain used by users to access Rootly web UI.\n   * Example: https://rootly.com\n   */\n  domain: string;\n\n  /**\n   * Path to use for requests via the proxy, defaults to /rootly/api\n   */\n  proxyPath?: string;\n};\n\n/**\n * API to talk to Rootly.\n */\nexport class RootlyApi implements Rootly {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly identityApi: IdentityApi;\n  private readonly proxyPath: string;\n  private readonly domain: string;\n\n  constructor(opts: Options) {\n    this.discoveryApi = opts.discoveryApi;\n    this.identityApi = opts.identityApi;\n    this.domain = opts.domain;\n    this.proxyPath = opts.proxyPath ?? DEFAULT_PROXY_PATH;\n  }\n\n  private async fetch<T = any>(input: string, init?: RequestInit): Promise<T> {\n    const apiUrl = await this.apiUrl();\n    const authedInit = await this.addAuthHeaders(init || {});\n\n    const resp = await fetch(`${apiUrl}${input}`, authedInit);\n    if (!resp.ok) {\n      throw new Error(`Request failed with ${resp.status} ${resp.statusText}`);\n    }\n\n    return await resp.json();\n  }\n\n  private async call(input: string, init?: RequestInit): Promise<void> {\n    const apiUrl = await this.apiUrl();\n    const authedInit = await this.addAuthHeaders(init || {});\n\n    const resp = await fetch(`${apiUrl}${input}`, authedInit);\n    if (!resp.ok)\n      throw new Error(`Request failed with ${resp.status}: ${resp.statusText}`);\n  }\n\n  async getService(id_or_slug: String): Promise<ServiceResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const response = await this.fetch<ServiceResponse>(\n      `/v1/services/${id_or_slug}`,\n      init,\n    );\n    return response;\n  }\n\n  async getServices(opts?: ServicesFetchOpts): Promise<ServicesResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<ServicesResponse>(\n      `/v1/services?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getIncidents(opts?: IncidentsFetchOpts): Promise<IncidentsResponse> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<IncidentsResponse>(\n      `/v1/incidents?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async getServiceIncidentsChart(service: Service, opts?: {period: string}): Promise<{data: object}> {\n    const init = { headers: { 'Content-Type': 'application/vnd.api+json' } };\n    const params = qs.stringify(opts, { encode: false });\n    const response = await this.fetch<{data: object}>(\n      `/v1/services/${service.id}/incidents_chart?${params}`,\n      init,\n    );\n    return response;\n  }\n\n  async importEntity(entity: Entity): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n    const init = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            name: entity.metadata.name,\n            description: entity.metadata.description,\n            backstage_id: entityTriplet,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services`, init);\n  }\n\n  async updateEntity(\n    entity: Entity,\n    service: Service,\n    old_service?: Service,\n  ): Promise<void> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    if (old_service?.id) {\n      const init1 = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/vnd.api+json' },\n        body: JSON.stringify({\n          data: {\n            type: 'services',\n            attributes: {\n              backstage_id: null,\n            },\n          },\n        }),\n      };\n\n      await this.call(`/v1/services/${old_service.id}`, init1);\n    }\n\n    const init2 = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            backstage_id: entityTriplet,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services/${service.id}`, init2);\n  }\n\n  async deleteEntity(service: Service): Promise<void> {\n    const init = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/vnd.api+json' },\n      body: JSON.stringify({\n        data: {\n          type: 'services',\n          attributes: {\n            backstage_id: null,\n          },\n        },\n      }),\n    };\n\n    await this.call(`/v1/services/${service.id}`, init);\n  }\n\n  getCreateIncidentURL(): string {\n    return `${this.domain}/account/incidents/new`;\n  }\n\n  getListIncidents(): string {\n    return `${this.domain}/account/incidents`;\n  }\n\n  getListIncidentsForServiceURL(service: Service): string {\n    const params = qs.stringify({services: [service.attributes.slug]}, { arrayFormat: 'brackets' });\n    return `${this.domain}/account/incidents?${params}`;\n  }\n\n  getServiceDetailsURL(service: Service): string {\n    return `${this.domain}/account/services/${service.attributes.slug}`;\n  }\n\n  private async apiUrl() {\n    const proxyUrl = await this.discoveryApi.getBaseUrl('proxy');\n    return proxyUrl + this.proxyPath;\n  }\n\n  private async addAuthHeaders(init: RequestInit): Promise<RequestInit> {\n    const { token } = await this.identityApi.getCredentials();\n    const headers = init.headers || {};\n\n    return {\n      ...init,\n      headers: {\n        ...headers,\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      },\n    };\n  }\n}\n","import {\n  createApiFactory,\n  createPlugin,\n  createRouteRef,\n  discoveryApiRef,\n  identityApiRef\n} from '@backstage/core-plugin-api';\nimport { RootlyApi, RootlyApiRef } from './api';\n\nexport const RootlyRouteRef = createRouteRef({\n  id: 'Rootly',\n});\n\nexport const RootlyPlugin = createPlugin({\n  id: 'Rootly',\n  apis: [\n    createApiFactory({\n      api: RootlyApiRef,\n      deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },\n      factory: ({ discoveryApi, identityApi }) => {\n        return new RootlyApi({\n          discoveryApi: discoveryApi,\n          identityApi: identityApi,\n          domain: 'https://rootly.com',\n        });\n      },\n    }),\n  ],\n  routes: {\n    explore: RootlyRouteRef,\n  },\n});\n","import { RootlyPlugin, RootlyRouteRef } from './plugin';\nimport {\n  createComponentExtension,\n  createRoutableExtension,\n} from '@backstage/core-plugin-api';\n\nexport const RootlyPage = RootlyPlugin.provide(\n  createRoutableExtension({\n    name: 'RootlyPage',\n    component: () => import('./components/RootlyPage').then(m => m.RootlyPage),\n    mountPoint: RootlyRouteRef,\n  }),\n);\n\nexport const RootlyOverviewCard = RootlyPlugin.provide(\n  createComponentExtension({\n    name: 'RootlyOverviewCard',\n    component: {\n      lazy: () => import('./components/Entity').then(m => m.RootlyOverviewCard),\n    },\n  }),\n);\n\nexport const RootlyIncidentsPage = RootlyPlugin.provide(\n  createComponentExtension({\n    name: 'RootlyIncidentsPage',\n    component: {\n      lazy: () => import('./components/RootlyIncidentsPage').then(m => m.RootlyIncidentsPage),\n    },\n  }),\n);\n","import { Entity } from '@backstage/catalog-model';\n\nexport const ROOTLY_ANNOTATION_SERVICE_ID = 'rootly.com/service-id';\nexport const ROOTLY_ANNOTATION_SERVICE_SLUG = 'rootly.com/service-slug';\nexport const ROOTLY_ANNOTATION_SERVICE_AUTO_IMPORT = 'rootly.com/service-auto-import';\n\nexport const isRootlyAvailable = (entity: Entity) =>\n  Boolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_ID]) && Boolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_ID]) ||\n  Boolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_SLUG]) && Boolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_SLUG]);\n\nexport const autoImportService = (entity: Entity) =>\nBoolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_AUTO_IMPORT]) && Boolean(entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_AUTO_IMPORT]);\n","import { parseEntityRef } from '@backstage/catalog-model';\nimport { Table, TableColumn } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { EntityRefLink } from '@backstage/plugin-catalog-react';\nimport { makeStyles, Tooltip } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport { Alert } from '@material-ui/lab';\nimport React, { useCallback, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { RootlyApiRef, ServicesFetchOpts } from '../../api';\nimport { Service } from '../../types';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    width: 850,\n  },\n  empty: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\nconst DEFAULT_PAGE_NUMBER = 1;\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport const ServicesTable = ({ params }: { params?: ServicesFetchOpts }) => {\n  const classes = useStyles();\n  const RootlyApi = useApi(RootlyApiRef);\n\n  const smallColumnStyle = {\n    width: '5%',\n    maxWidth: '5%',\n  };\n  const mediumColumnStyle = {\n    width: '10%',\n    maxWidth: '10%',\n  };\n\n  const [page, setPage] = useState({\n    number: DEFAULT_PAGE_NUMBER,\n    size: DEFAULT_PAGE_SIZE,\n  });\n\n  const {\n    value: response,\n    loading,\n    error,\n  } = useAsync(\n    async () => await RootlyApi.getServices({ ...params, page: page }),\n    [page],\n  );\n\n  const nameColumn = useCallback(rowData => {\n    return (\n      <Tooltip\n        title={\n          rowData.attributes.description?.substring(0, 255) ||\n          rowData.attributes.name\n        }\n      >\n        <Link target=\"blank\" href={RootlyApi.getServiceDetailsURL(rowData)}>\n          {rowData.attributes.name}\n        </Link>\n      </Tooltip>\n    );\n  }, []);\n\n  const backstageColumn = useCallback(rowData => {\n    if (rowData.attributes.backstage_id) {\n      return (\n        <EntityRefLink\n          entityRef={parseEntityRef(rowData.attributes.backstage_id)}\n        />\n      );\n    } else {\n      return <div>N/A</div>;\n    }\n  }, []);\n\n  const columns: TableColumn<Service>[] = [\n    {\n      title: 'Name',\n      field: 'name',\n      highlight: true,\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: nameColumn,\n    },\n    {\n      title: 'Backstage',\n      field: 'backstage',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: backstageColumn,\n    },\n    {\n      title: 'Incidents',\n      field: 'attributes.incidents_count',\n      type: 'numeric',\n      cellStyle: mediumColumnStyle,\n      headerStyle: mediumColumnStyle,\n    },\n    {\n      title: 'Updated At',\n      field: 'attributes.updated_at',\n      type: 'datetime',\n      dateSetting: { locale: 'en-US' },\n      cellStyle: mediumColumnStyle,\n      headerStyle: mediumColumnStyle,\n    },\n    {\n      title: 'Created At',\n      field: 'attributes.created_at',\n      type: 'datetime',\n      dateSetting: { locale: 'en-US' },\n      cellStyle: mediumColumnStyle,\n      headerStyle: mediumColumnStyle,\n    },\n  ];\n\n  if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  const data = response ? response.data : [];\n\n  return (\n    <Table\n      isLoading={loading}\n      options={{\n        sorting: true,\n        search: false,\n        paging: true,\n        actionsColumnIndex: -1,\n        pageSize: DEFAULT_PAGE_SIZE,\n        padding: 'dense',\n      }}\n      localization={{ header: { actions: undefined } }}\n      columns={columns}\n      data={data}\n      page={page.number - 1}\n      totalCount={response?.meta.total_count}\n      emptyContent={<div className={classes.empty}>No services</div>}\n      onPageChange={pageIndex => setPage({ ...page, number: pageIndex + 1 })}\n      onRowsPerPageChange={rowsPerPage =>\n        setPage({ ...page, size: rowsPerPage })\n      }\n    />\n  );\n};\n","import {\n  Environment,\n  Functionality,\n  Group,\n  Incident,\n  IncidentType,\n  Service,\n} from '../../types';\n\nexport class IncidentWrapper {\n  incident: Incident;\n  included: any;\n  constructor(incident: Incident, included: any) {\n    this.incident = incident;\n    this.included = included;\n  }\n\n  environments = (): Environment[] => {\n    if (this.incident.relationships?.environments?.data) {\n      const ids = this.incident.relationships?.environments?.data.map(r => {\n        return r.id;\n      });\n      return this.included?.filter((i: { type: string; id: string }) => {\n        return i.type == 'environments' && ids.includes(i.id);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  services = (): Service[] => {\n    if (this.incident.relationships?.services?.data) {\n      const ids = this.incident.relationships?.services?.data.map(r => {\n        return r.id;\n      });\n      return this.included?.filter((i: { type: string; id: string }) => {\n        return i.type == 'services' && ids.includes(i.id);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  functionalities = (): Functionality[] => {\n    if (this.incident.relationships?.functionalities?.data) {\n      const ids = this.incident.relationships?.functionalities?.data.map(r => {\n        return r.id;\n      });\n      return this.included?.filter((i: { type: string; id: string }) => {\n        return i.type == 'functionalities' && ids.includes(i.id);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  groups = (): Group[] => {\n    if (this.incident.relationships?.groups?.data) {\n      const ids = this.incident.relationships?.groups?.data.map(r => {\n        return r.id;\n      });\n      return this.included?.filter((i: { type: string; id: string }) => {\n        return i.type == 'groups' && ids.includes(i.id);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  types = (): IncidentType[] => {\n    if (this.incident.relationships?.incident_types?.data) {\n      const ids = this.incident.relationships?.incident_types?.data.map(r => {\n        return r.id;\n      });\n      return this.included?.filter((i: { type: string; id: string }) => {\n        return i.type == 'incident_types' && ids.includes(i.id);\n      });\n    } else {\n      return [];\n    }\n  };\n}\n","import { Chip, Tooltip } from '@material-ui/core';\nimport React from 'react';\n\nexport const ColoredChip = ({\n  label,\n  tooltip,\n  color,\n}: {\n  label?: string;\n  tooltip?: string;\n  color?: string;\n}) => {\n  if (label) {\n    return (\n      <Tooltip title={tooltip || label}>\n        <Chip\n          label={label}\n          style={{ backgroundColor: color || '#FFF' }}\n          size=\"small\"\n        />\n      </Tooltip>\n    );\n  } else {\n    return <Chip label=\"N/A\" size=\"small\" />;\n  }\n};\n","import { Chip } from '@material-ui/core';\nimport React from 'react';\nimport {\n  Environment,\n  Functionality,\n  Group,\n  IncidentType,\n  Service,\n} from '../../types';\nimport { ColoredChip } from './ColoredChip';\n\nexport const ColoredChips = ({\n  objects,\n}: {\n  objects:\n    | Service[]\n    | Functionality[]\n    | Environment[]\n    | IncidentType[]\n    | Group[];\n}) => {\n  if (objects?.length > 0) {\n    return (\n      <>\n        {objects.map(r => {\n          return (\n            <ColoredChip\n              key={Math.random().toString(36)}\n              label={r.attributes.name}\n              tooltip={r.attributes.description}\n              color={r.attributes.color}\n            />\n          );\n        })}\n      </>\n    );\n  }\n  return <Chip label=\"N/A\" size=\"small\" />;\n};\n","import React from 'react';\nimport { Chip, Tooltip, withStyles } from '@material-ui/core';\n\nconst ResolvedChip = withStyles({\n  root: {\n    backgroundColor: '#C5F0C0',\n    color: 'black',\n  },\n})(Chip);\nconst MitigatedChip = withStyles({\n  root: {\n    backgroundColor: '#FBE4A0',\n    color: 'black',\n  },\n})(Chip);\nconst StartedChip = withStyles({\n  root: {\n    backgroundColor: '#047BF8',\n    color: 'white',\n  },\n})(Chip);\n\nexport const StatusChip = ({ status }: { status: string }) => {\n  let chip = <></>;\n  switch (status) {\n    case 'resolved':\n    case 'completed':\n      chip = <ResolvedChip label={status} size=\"small\" />;\n      break;\n    case 'mitigated':\n    case 'in_progress':\n    case 'verifying':\n    case 'scheduled':\n    case 'cancelled':\n      chip = <MitigatedChip label={status} size=\"small\" />;\n      break;\n    case 'started':\n      chip = <StartedChip label={status} size=\"small\" />;\n      break;\n    default:\n      chip = <Chip label={status} size=\"small\" />;\n  }\n\n  return (\n    <Tooltip title={status}>\n      <span>{chip}</span>\n    </Tooltip>\n  );\n};\n","import { Table, TableColumn } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { Chip, makeStyles, Tooltip } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport { Alert } from '@material-ui/lab';\nimport React, { useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { IncidentsFetchOpts, RootlyApiRef } from '../../api';\nimport { IncidentWrapper } from '../Incident';\nimport { ColoredChip } from '../UI/ColoredChip';\nimport { ColoredChips } from '../UI/ColoredChips';\nimport { StatusChip } from '../UI/StatusChip';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    width: 850,\n  },\n  empty: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\nconst DEFAULT_PAGE_NUMBER = 1;\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport const IncidentsTable = ({ params }: { params?: IncidentsFetchOpts }) => {\n  const classes = useStyles();\n  const RootlyApi = useApi(RootlyApiRef);\n\n  const smallColumnStyle = {\n    width: '5%',\n    maxWidth: '5%',\n  };\n  const mediumColumnStyle = {\n    width: '10%',\n    maxWidth: '10%',\n  };\n\n  const [page, setPage] = useState({\n    number: DEFAULT_PAGE_NUMBER,\n    size: DEFAULT_PAGE_SIZE,\n  });\n\n  const {\n    value: response,\n    loading,\n    error,\n  } = useAsync(\n    async () => await RootlyApi.getIncidents({ ...params, page: page }),\n    [page],\n  );\n\n  const columns: TableColumn<IncidentWrapper>[] = [\n    {\n      title: 'Started At',\n      field: 'incident.attributes.started_at',\n      type: 'datetime',\n      dateSetting: { locale: 'en-US' },\n      cellStyle: mediumColumnStyle,\n      headerStyle: mediumColumnStyle,\n    },\n    {\n      title: 'Title',\n      field: 'title',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => (\n        <Tooltip\n          title={\n            rowData.incident.attributes.summary?.substring(0, 255) ||\n            rowData.incident.attributes.title\n          }\n        >\n          <Link\n            target=\"blank\"\n            href={rowData.incident.attributes.url}\n          >\n            {rowData.incident.attributes.title}\n          </Link>\n        </Tooltip>\n      ),\n    },\n    {\n      title: 'Started By',\n      field: 'user.full_name',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => (\n        <Chip\n          label={rowData.incident.attributes.user?.data.attributes.full_name}\n          size=\"small\"\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      field: 'status',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => (\n        <StatusChip status={rowData.incident.attributes.status} />\n      ),\n    },\n    {\n      title: 'Severity',\n      field: 'severity',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => (\n        <ColoredChip\n          label={rowData.incident.attributes.severity?.data.attributes.name}\n          tooltip={\n            rowData.incident.attributes.severity?.data.attributes.description\n          }\n          color={rowData.incident.attributes.severity?.data.attributes.color}\n        />\n      ),\n    },\n    {\n      title: 'Environments',\n      field: 'environments',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => <ColoredChips objects={rowData.environments()} />,\n    },\n    {\n      title: 'Services',\n      field: 'services',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => <ColoredChips objects={rowData.services()} />,\n    },\n    {\n      title: 'Functionalities',\n      field: 'functionalities',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => <ColoredChips objects={rowData.functionalities()} />,\n    },\n    {\n      title: 'Teams',\n      field: 'teams',\n      cellStyle: smallColumnStyle,\n      headerStyle: smallColumnStyle,\n      render: rowData => <ColoredChips objects={rowData.groups()} />,\n    },\n  ];\n\n  if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  const data = response\n    ? response.data.map(i => {\n        return new IncidentWrapper(i, response.included);\n      })\n    : [];\n\n  return (\n    <Table\n      isLoading={loading}\n      options={{\n        sorting: true,\n        search: false,\n        paging: true,\n        actionsColumnIndex: -1,\n        pageSize: DEFAULT_PAGE_SIZE,\n        padding: 'dense',\n      }}\n      localization={{ header: { actions: undefined } }}\n      columns={columns}\n      data={data}\n      page={page.number - 1}\n      totalCount={response?.meta.total_count}\n      emptyContent={<div className={classes.empty}>No incidents</div>}\n      onPageChange={pageIndex => setPage({ ...page, number: pageIndex + 1 })}\n      onRowsPerPageChange={rowsPerPage =>\n        setPage({ ...page, size: rowsPerPage })\n      }\n    />\n  );\n};\n","import { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Select, SelectedItems, SelectItem } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport { Alert } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { RootlyApiRef } from '../../api';\nimport { Entity, Service } from '../../types';\n\nexport const ServicesDialog = ({\n  open,\n  entity,\n  handleClose,\n  handleImport,\n  handleUpdate,\n}: {\n  open: boolean;\n  entity: Entity;\n  handleClose: (event: {}, reason: 'backdropClick' | 'escapeKeyDown') => void;\n  handleImport: Function;\n  handleUpdate: Function;\n}) => {\n  const RootlyApi = useApi(RootlyApiRef);\n  const [selectedItem, setSelectedItem] = useState('' as SelectedItems);\n\n  const {\n    value: response,\n    loading,\n    error,\n  } = useAsync(\n    async () =>\n      await RootlyApi.getServices({\n        filter: {\n          backstage_id: null,\n        },\n        page: { size: 999 },\n      }),\n  );\n\n  const data = response ? response.data : [];\n\n  useEffect(() => {\n    if (entity && data) {\n      const entityTriplet = stringifyEntityRef({\n        namespace: entity.metadata.namespace,\n        kind: entity.kind,\n        name: entity.metadata.name,\n      });\n      const selectedItem = data.find(\n        s => s.attributes.backstage_id == entityTriplet,\n      )?.id;\n      if (selectedItem) {\n        setSelectedItem(selectedItem);\n      }\n    }\n  }, [data]);\n\n  const onSelectedServiceChanged = (newSelectedItem: SelectedItems) => {\n    setSelectedItem(newSelectedItem);\n  };\n\n  const onImportAsNewServiceButtonClicked = () => {\n    handleImport(entity);\n  };\n\n  const onLinkToExistingServiceButtonClicked = () => {\n    handleUpdate(\n      entity,\n      { id: selectedItem } as Service,\n      { id: entity.linkedService?.id } as Service,\n    );\n  };\n\n  if (loading) {\n    return <></>;\n  } else if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n    >\n      <DialogTitle id=\"dialog-title\">Services</DialogTitle>\n      <DialogContent>\n        {entity && !entity.linkedService && (\n          <>\n            <Box sx={{ mx: 'auto' }} mb={2}>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={onImportAsNewServiceButtonClicked}\n              >\n                Import as new service\n              </Button>\n            </Box>\n            <Divider />\n          </>\n        )}\n        <Box sx={{ mx: 'auto' }} mt={2}>\n          <Typography>\n            Select a Rootly service you want to map this component to:\n          </Typography>\n          <Select\n            onChange={onSelectedServiceChanged}\n            selected={selectedItem}\n            placeholder=\"Select\"\n            label=\"Services\"\n            items={(data || []).map((service: Service): SelectItem => {\n              return {\n                label: service.attributes.name,\n                value: service.id,\n              };\n            })}\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={onLinkToExistingServiceButtonClicked}>\n          Link\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n"],"names":["__publicField","useStyles","DEFAULT_PAGE_NUMBER","DEFAULT_PAGE_SIZE","selectedItem"],"mappings":"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"}